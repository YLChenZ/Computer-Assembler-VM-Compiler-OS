// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array screen;
	static boolean CurColor;
    /** Initializes the Screen. */
    function void init() {
		let screen = 16384;
		let CurColor = true;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		let i = 0;
		
		while (i < 8192){
			let screen[i] = 0;
			let i = i + 1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let CurColor = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int addr,getVal,bitLoc,color2int;
		
		let addr = y*32 + x/16;
		let getVal = Memory.peek(addr);
		let bitLoc = x - ((x/16)*16);
		if (CurColor){
			let color2int = -1;
		}
		else {
			let color2int = 0;
		}
		
		if (Math.bit(x,bitLoc-1)){
			let screen[addr] = x&color2int;
			return;
		}
		else{
			let screen[addr] = x|color2int;
			return;
		}
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int dx,dy,a,b,diff;
		
		let dx = x2-x1;
		let dy = y2-y1;
		let a=0;
		let b=0;
		let diff=a*dy-b*dx;
		
		if((dx=0) & (dy=0)){
			do Screen.drawPixel(x1,y1);
			return;
		}
		if((dx>0) & (dy>0)){
			while(~(a>dx)&~(b>dy)){
				do Screen.drawPixel(x1+a,y1+b);
				if(diff<0){
					let a=a+1;
					let diff=diff+dy;
				}
				else {
					let b=b+1;
					let diff=diff-dx;
				}
			}
			return;
		}
		if((dx=0) & (dy>0)){
			while(~(b>dy)){
				do Screen.drawPixel(x1,y1+b);
				let b=b+1;
			}
			return;
		}
		if((dx=0) & (dy<0)){
			while(~(b>Math.abs(dy))){
				do Screen.drawPixel(x2,y2+b);
				let b=b+1;
			}
			return;
		}
		if((dx<0) & (dy=0)){
			while(~(a>Math.abs(dx))){
				do Screen.drawPixel(x2+a,y2);
				let a=a+1;
			}
			return;
		}
		if((dx>0) & (dy=0)){
			while(~(a>dx)){
				do Screen.drawPixel(x1+a,y1);
				let a=a+1;
			}
			return;
		}
		if((dx>0) & (dy<0)){
			while(~(a>dx) & ~(b>Math.abs(dy))){
				do Screen.drawPixel(x1+a,y1-b);
				if(diff<0) {
					let a=a+1; 
					let diff=diff+Math.abs(dy);
				}
				else {
					let b=b+1; 
					let diff=diff-dx;
				}
			}
			return;
		}
		if((dx<0) & (dy>0)){
			while(~(a>Math.abs(dx)) & ~(b>dy)){
				do Screen.drawPixel(x1-a,y1+b);
				if(diff<0){
					let a=a+1; 
					let diff=diff+dy;
				}
				else {
					let b=b+1; 
					let diff=diff-Math.abs(dx);
				}
			}
			return;
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		while(~(x1 > x2)){
			do Screen.drawLine(x1,y1,x1,y2);
			let x1 = x1 + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dy,x1,x2,y1;
		if (~(r > 181)){
			let dy = -r;
		
			while (~(dy > r)){
				let x1 = x - Math.sqrt((r*r)-(dy*dy));
				let x2 = x + Math.sqrt((r*r)-(dy*dy));
				let y1 = y + dy;
				do Screen.drawLine(x1,y1,x2,y1);
				let dy = dy + 1;
			}
			return;
		}
		return;
    }
}
