// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array memory; //regard RAM as an array
	static int heapBase; //the base address of heap 
	static int freeList; //using linked list manage memory 
	static int listEnd;	 //record the freeList's end
	
    /** Initializes the class. */
    function void init() {
		let heapBase = 2048;
		let freeList = heapBase;
		let memory = 0;
		let memory[freeList] = 14336;
		let memory[freeList+1] = null;
		let listEnd = freeList + 1;
		return;
		
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let memory[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int fL_size,fL_next,block,CurSize,CurSize_Addr,next;
		
		let fL_size = memory[freeList];
		let fL_next = memory[freeList+1];
		
		//whole block need not to search.
		if (fL_next = 0){
			let block = freeList + fL_size - size;
			let fL_size = fL_size - size - 1;
			let fL_next = block;
			let block[-1] = size + 1;
			return block;
		}
		
		let block = -1;
		
		//search in freeList
		let CurSize = memory[fL_next];
		let CurSize_Addr = fL_next;
		let next = memory[fL_next+1];
		while ( ~(next = 0)){
			if (CurSize < (size + 2)){
				let CurSize = memory[next];
				let CurSize_Addr = next;
				let next = memory[next+1];
			}
			else {
				let block = CurSize_Addr + CurSize - size;
				let CurSize = CurSize - size - 1;
				let block[-1] = size + 1;
				//return block;
			}
		}
		// cann't search the suitable memory.
		if (block = -1){
			return -1;
		}
		return block;
    }
	

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		//add o at the end of freeList
		var int o_size_addr;
		let o_size_addr = o - 1;
		let listEnd = o_size_addr;
		let o = null;
		
		//update listEnd
		let listEnd = o_size_addr + 1;
		return;
    }
}
